// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: feature.proto

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FeatureServer_ListUserFeatures_FullMethodName           = "/feature.FeatureServer/ListUserFeatures"
	FeatureServer_ListArticleFeatures_FullMethodName        = "/feature.FeatureServer/ListArticleFeatures"
	FeatureServer_ListBehaviorFeatures_FullMethodName       = "/feature.FeatureServer/ListBehaviorFeatures"
	FeatureServer_ListCooperatorFeatures_FullMethodName     = "/feature.FeatureServer/ListCooperatorFeatures"
	FeatureServer_ListPublishedPaperFeatures_FullMethodName = "/feature.FeatureServer/ListPublishedPaperFeatures"
	FeatureServer_GetTopicsAndTags_FullMethodName           = "/feature.FeatureServer/GetTopicsAndTags"
	FeatureServer_GetUserPublishedPaper_FullMethodName      = "/feature.FeatureServer/GetUserPublishedPaper"
	FeatureServer_GetUserBehaviourPaper_FullMethodName      = "/feature.FeatureServer/GetUserBehaviourPaper"
	FeatureServer_GetUserCooperator_FullMethodName          = "/feature.FeatureServer/GetUserCooperator"
	FeatureServer_GetPopularPapers_FullMethodName           = "/feature.FeatureServer/GetPopularPapers"
	FeatureServer_RefreshCache_FullMethodName               = "/feature.FeatureServer/RefreshCache"
)

// FeatureServerClient is the client API for FeatureServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServerClient interface {
	// 这里是流式获取，会根据版本号来获取对应范围内的数据
	ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListUserFeaturesClient, error)
	ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListArticleFeaturesClient, error)
	ListBehaviorFeatures(ctx context.Context, in *BehaviorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListBehaviorFeaturesClient, error)
	ListCooperatorFeatures(ctx context.Context, in *CooperatorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListCooperatorFeaturesClient, error)
	ListPublishedPaperFeatures(ctx context.Context, in *PublishedPaperFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListPublishedPaperFeaturesClient, error)
	GetTopicsAndTags(ctx context.Context, in *GetTopicsAndTagsRequest, opts ...grpc.CallOption) (FeatureServer_GetTopicsAndTagsClient, error)
	// 这里会获取符合条件的所有数据
	GetUserPublishedPaper(ctx context.Context, in *GetUserPublishedPaperRequest, opts ...grpc.CallOption) (*GetUserPublishedPaperResponse, error)
	GetUserBehaviourPaper(ctx context.Context, in *GetUserBehaviourPaperRequest, opts ...grpc.CallOption) (*GetUserBehaviourPaperResponse, error)
	GetUserCooperator(ctx context.Context, in *GetUserCooperatorRequest, opts ...grpc.CallOption) (*GetUserCooperatorResponse, error)
	GetPopularPapers(ctx context.Context, in *GetPopularPapersRequest, opts ...grpc.CallOption) (*GetPopularPapersResponse, error)
	// 增量数据触发刷新缓存
	RefreshCache(ctx context.Context, in *RefreshCacheRequest, opts ...grpc.CallOption) (*RefreshCacheResponse, error)
}

type featureServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServerClient(cc grpc.ClientConnInterface) FeatureServerClient {
	return &featureServerClient{cc}
}

func (c *featureServerClient) ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListUserFeaturesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[0], FeatureServer_ListUserFeatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListUserFeaturesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListUserFeaturesClient interface {
	Recv() (*UserFeature, error)
	grpc.ClientStream
}

type featureServerListUserFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListUserFeaturesClient) Recv() (*UserFeature, error) {
	m := new(UserFeature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListArticleFeaturesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[1], FeatureServer_ListArticleFeatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListArticleFeaturesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListArticleFeaturesClient interface {
	Recv() (*ArticleFeature, error)
	grpc.ClientStream
}

type featureServerListArticleFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListArticleFeaturesClient) Recv() (*ArticleFeature, error) {
	m := new(ArticleFeature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListBehaviorFeatures(ctx context.Context, in *BehaviorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListBehaviorFeaturesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[2], FeatureServer_ListBehaviorFeatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListBehaviorFeaturesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListBehaviorFeaturesClient interface {
	Recv() (*BehaviorFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListBehaviorFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListBehaviorFeaturesClient) Recv() (*BehaviorFeatureResponse, error) {
	m := new(BehaviorFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListCooperatorFeatures(ctx context.Context, in *CooperatorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListCooperatorFeaturesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[3], FeatureServer_ListCooperatorFeatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListCooperatorFeaturesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListCooperatorFeaturesClient interface {
	Recv() (*CooperatorFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListCooperatorFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListCooperatorFeaturesClient) Recv() (*CooperatorFeatureResponse, error) {
	m := new(CooperatorFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListPublishedPaperFeatures(ctx context.Context, in *PublishedPaperFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListPublishedPaperFeaturesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[4], FeatureServer_ListPublishedPaperFeatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListPublishedPaperFeaturesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListPublishedPaperFeaturesClient interface {
	Recv() (*PublishedPaperFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListPublishedPaperFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListPublishedPaperFeaturesClient) Recv() (*PublishedPaperFeatureResponse, error) {
	m := new(PublishedPaperFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) GetTopicsAndTags(ctx context.Context, in *GetTopicsAndTagsRequest, opts ...grpc.CallOption) (FeatureServer_GetTopicsAndTagsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[5], FeatureServer_GetTopicsAndTags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerGetTopicsAndTagsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_GetTopicsAndTagsClient interface {
	Recv() (*GetTopicsAndTagsResponse, error)
	grpc.ClientStream
}

type featureServerGetTopicsAndTagsClient struct {
	grpc.ClientStream
}

func (x *featureServerGetTopicsAndTagsClient) Recv() (*GetTopicsAndTagsResponse, error) {
	m := new(GetTopicsAndTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) GetUserPublishedPaper(ctx context.Context, in *GetUserPublishedPaperRequest, opts ...grpc.CallOption) (*GetUserPublishedPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPublishedPaperResponse)
	err := c.cc.Invoke(ctx, FeatureServer_GetUserPublishedPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServerClient) GetUserBehaviourPaper(ctx context.Context, in *GetUserBehaviourPaperRequest, opts ...grpc.CallOption) (*GetUserBehaviourPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBehaviourPaperResponse)
	err := c.cc.Invoke(ctx, FeatureServer_GetUserBehaviourPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServerClient) GetUserCooperator(ctx context.Context, in *GetUserCooperatorRequest, opts ...grpc.CallOption) (*GetUserCooperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCooperatorResponse)
	err := c.cc.Invoke(ctx, FeatureServer_GetUserCooperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServerClient) GetPopularPapers(ctx context.Context, in *GetPopularPapersRequest, opts ...grpc.CallOption) (*GetPopularPapersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPopularPapersResponse)
	err := c.cc.Invoke(ctx, FeatureServer_GetPopularPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureServerClient) RefreshCache(ctx context.Context, in *RefreshCacheRequest, opts ...grpc.CallOption) (*RefreshCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshCacheResponse)
	err := c.cc.Invoke(ctx, FeatureServer_RefreshCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServerServer is the server API for FeatureServer service.
// All implementations must embed UnimplementedFeatureServerServer
// for forward compatibility
type FeatureServerServer interface {
	// 这里是流式获取，会根据版本号来获取对应范围内的数据
	ListUserFeatures(*UserFeatureRequest, FeatureServer_ListUserFeaturesServer) error
	ListArticleFeatures(*ArticleFeatureRequest, FeatureServer_ListArticleFeaturesServer) error
	ListBehaviorFeatures(*BehaviorFeatureRequest, FeatureServer_ListBehaviorFeaturesServer) error
	ListCooperatorFeatures(*CooperatorFeatureRequest, FeatureServer_ListCooperatorFeaturesServer) error
	ListPublishedPaperFeatures(*PublishedPaperFeatureRequest, FeatureServer_ListPublishedPaperFeaturesServer) error
	GetTopicsAndTags(*GetTopicsAndTagsRequest, FeatureServer_GetTopicsAndTagsServer) error
	// 这里会获取符合条件的所有数据
	GetUserPublishedPaper(context.Context, *GetUserPublishedPaperRequest) (*GetUserPublishedPaperResponse, error)
	GetUserBehaviourPaper(context.Context, *GetUserBehaviourPaperRequest) (*GetUserBehaviourPaperResponse, error)
	GetUserCooperator(context.Context, *GetUserCooperatorRequest) (*GetUserCooperatorResponse, error)
	GetPopularPapers(context.Context, *GetPopularPapersRequest) (*GetPopularPapersResponse, error)
	// 增量数据触发刷新缓存
	RefreshCache(context.Context, *RefreshCacheRequest) (*RefreshCacheResponse, error)
	mustEmbedUnimplementedFeatureServerServer()
}

// UnimplementedFeatureServerServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureServerServer struct {
}

func (UnimplementedFeatureServerServer) ListUserFeatures(*UserFeatureRequest, FeatureServer_ListUserFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListArticleFeatures(*ArticleFeatureRequest, FeatureServer_ListArticleFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArticleFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListBehaviorFeatures(*BehaviorFeatureRequest, FeatureServer_ListBehaviorFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBehaviorFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListCooperatorFeatures(*CooperatorFeatureRequest, FeatureServer_ListCooperatorFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCooperatorFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListPublishedPaperFeatures(*PublishedPaperFeatureRequest, FeatureServer_ListPublishedPaperFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPublishedPaperFeatures not implemented")
}
func (UnimplementedFeatureServerServer) GetTopicsAndTags(*GetTopicsAndTagsRequest, FeatureServer_GetTopicsAndTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTopicsAndTags not implemented")
}
func (UnimplementedFeatureServerServer) GetUserPublishedPaper(context.Context, *GetUserPublishedPaperRequest) (*GetUserPublishedPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPublishedPaper not implemented")
}
func (UnimplementedFeatureServerServer) GetUserBehaviourPaper(context.Context, *GetUserBehaviourPaperRequest) (*GetUserBehaviourPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBehaviourPaper not implemented")
}
func (UnimplementedFeatureServerServer) GetUserCooperator(context.Context, *GetUserCooperatorRequest) (*GetUserCooperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCooperator not implemented")
}
func (UnimplementedFeatureServerServer) GetPopularPapers(context.Context, *GetPopularPapersRequest) (*GetPopularPapersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularPapers not implemented")
}
func (UnimplementedFeatureServerServer) RefreshCache(context.Context, *RefreshCacheRequest) (*RefreshCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshCache not implemented")
}
func (UnimplementedFeatureServerServer) mustEmbedUnimplementedFeatureServerServer() {}

// UnsafeFeatureServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServerServer will
// result in compilation errors.
type UnsafeFeatureServerServer interface {
	mustEmbedUnimplementedFeatureServerServer()
}

func RegisterFeatureServerServer(s grpc.ServiceRegistrar, srv FeatureServerServer) {
	s.RegisterService(&FeatureServer_ServiceDesc, srv)
}

func _FeatureServer_ListUserFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListUserFeatures(m, &featureServerListUserFeaturesServer{ServerStream: stream})
}

type FeatureServer_ListUserFeaturesServer interface {
	Send(*UserFeature) error
	grpc.ServerStream
}

type featureServerListUserFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListUserFeaturesServer) Send(m *UserFeature) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListArticleFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArticleFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListArticleFeatures(m, &featureServerListArticleFeaturesServer{ServerStream: stream})
}

type FeatureServer_ListArticleFeaturesServer interface {
	Send(*ArticleFeature) error
	grpc.ServerStream
}

type featureServerListArticleFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListArticleFeaturesServer) Send(m *ArticleFeature) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListBehaviorFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BehaviorFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListBehaviorFeatures(m, &featureServerListBehaviorFeaturesServer{ServerStream: stream})
}

type FeatureServer_ListBehaviorFeaturesServer interface {
	Send(*BehaviorFeatureResponse) error
	grpc.ServerStream
}

type featureServerListBehaviorFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListBehaviorFeaturesServer) Send(m *BehaviorFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListCooperatorFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CooperatorFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListCooperatorFeatures(m, &featureServerListCooperatorFeaturesServer{ServerStream: stream})
}

type FeatureServer_ListCooperatorFeaturesServer interface {
	Send(*CooperatorFeatureResponse) error
	grpc.ServerStream
}

type featureServerListCooperatorFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListCooperatorFeaturesServer) Send(m *CooperatorFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListPublishedPaperFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishedPaperFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListPublishedPaperFeatures(m, &featureServerListPublishedPaperFeaturesServer{ServerStream: stream})
}

type FeatureServer_ListPublishedPaperFeaturesServer interface {
	Send(*PublishedPaperFeatureResponse) error
	grpc.ServerStream
}

type featureServerListPublishedPaperFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListPublishedPaperFeaturesServer) Send(m *PublishedPaperFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_GetTopicsAndTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTopicsAndTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).GetTopicsAndTags(m, &featureServerGetTopicsAndTagsServer{ServerStream: stream})
}

type FeatureServer_GetTopicsAndTagsServer interface {
	Send(*GetTopicsAndTagsResponse) error
	grpc.ServerStream
}

type featureServerGetTopicsAndTagsServer struct {
	grpc.ServerStream
}

func (x *featureServerGetTopicsAndTagsServer) Send(m *GetTopicsAndTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_GetUserPublishedPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPublishedPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServerServer).GetUserPublishedPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureServer_GetUserPublishedPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServerServer).GetUserPublishedPaper(ctx, req.(*GetUserPublishedPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServer_GetUserBehaviourPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBehaviourPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServerServer).GetUserBehaviourPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureServer_GetUserBehaviourPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServerServer).GetUserBehaviourPaper(ctx, req.(*GetUserBehaviourPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServer_GetUserCooperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCooperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServerServer).GetUserCooperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureServer_GetUserCooperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServerServer).GetUserCooperator(ctx, req.(*GetUserCooperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServer_GetPopularPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularPapersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServerServer).GetPopularPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureServer_GetPopularPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServerServer).GetPopularPapers(ctx, req.(*GetPopularPapersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureServer_RefreshCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServerServer).RefreshCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureServer_RefreshCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServerServer).RefreshCache(ctx, req.(*RefreshCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureServer_ServiceDesc is the grpc.ServiceDesc for FeatureServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature.FeatureServer",
	HandlerType: (*FeatureServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPublishedPaper",
			Handler:    _FeatureServer_GetUserPublishedPaper_Handler,
		},
		{
			MethodName: "GetUserBehaviourPaper",
			Handler:    _FeatureServer_GetUserBehaviourPaper_Handler,
		},
		{
			MethodName: "GetUserCooperator",
			Handler:    _FeatureServer_GetUserCooperator_Handler,
		},
		{
			MethodName: "GetPopularPapers",
			Handler:    _FeatureServer_GetPopularPapers_Handler,
		},
		{
			MethodName: "RefreshCache",
			Handler:    _FeatureServer_RefreshCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUserFeatures",
			Handler:       _FeatureServer_ListUserFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListArticleFeatures",
			Handler:       _FeatureServer_ListArticleFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBehaviorFeatures",
			Handler:       _FeatureServer_ListBehaviorFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCooperatorFeatures",
			Handler:       _FeatureServer_ListCooperatorFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPublishedPaperFeatures",
			Handler:       _FeatureServer_ListPublishedPaperFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTopicsAndTags",
			Handler:       _FeatureServer_GetTopicsAndTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feature.proto",
}
