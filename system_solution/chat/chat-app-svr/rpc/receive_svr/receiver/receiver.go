// Code generated by goctl. DO NOT EDIT.
// Source: receive_svr.proto

package receiver

import (
	"context"

	"chat-app-svr/rpc/receive_svr/receive"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Message                    = receive.Message
	ReceiveGroupMessageReply   = receive.ReceiveGroupMessageReply
	ReceiveGroupMessageRequest = receive.ReceiveGroupMessageRequest
	ReceiveMessageReply        = receive.ReceiveMessageReply
	ReceiveMessageRequest      = receive.ReceiveMessageRequest

	Receiver interface {
		ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageReply, error)
		ReceiveGroupMessage(ctx context.Context, in *ReceiveGroupMessageRequest, opts ...grpc.CallOption) (*ReceiveGroupMessageReply, error)
	}

	defaultReceiver struct {
		cli zrpc.Client
	}
)

func NewReceiver(cli zrpc.Client) Receiver {
	return &defaultReceiver{
		cli: cli,
	}
}

func (m *defaultReceiver) ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageReply, error) {
	client := receive.NewReceiverClient(m.cli.Conn())
	return client.ReceiveMessage(ctx, in, opts...)
}

func (m *defaultReceiver) ReceiveGroupMessage(ctx context.Context, in *ReceiveGroupMessageRequest, opts ...grpc.CallOption) (*ReceiveGroupMessageReply, error) {
	client := receive.NewReceiverClient(m.cli.Conn())
	return client.ReceiveGroupMessage(ctx, in, opts...)
}
