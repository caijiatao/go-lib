// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"chat-app-svr/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request            = user.Request
	Response           = user.Response
	UserDetailReply    = user.UserDetailReply
	UserDetailRequest  = user.UserDetailRequest
	UserOfflineReply   = user.UserOfflineReply
	UserOfflineRequest = user.UserOfflineRequest
	UserOnlineReply    = user.UserOnlineReply
	UserOnlineRequest  = user.UserOnlineRequest

	User interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		UserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailReply, error)
		UserOnline(ctx context.Context, in *UserOnlineRequest, opts ...grpc.CallOption) (*UserOnlineReply, error)
		UserOffline(ctx context.Context, in *UserOfflineRequest, opts ...grpc.CallOption) (*UserOfflineReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) UserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserDetail(ctx, in, opts...)
}

func (m *defaultUser) UserOnline(ctx context.Context, in *UserOnlineRequest, opts ...grpc.CallOption) (*UserOnlineReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserOnline(ctx, in, opts...)
}

func (m *defaultUser) UserOffline(ctx context.Context, in *UserOfflineRequest, opts ...grpc.CallOption) (*UserOfflineReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserOffline(ctx, in, opts...)
}
