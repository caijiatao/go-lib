// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.24.0--rc3
// source: feature.proto

package feature

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *UserFeatureRequest) Reset() {
	*x = UserFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeatureRequest) ProtoMessage() {}

func (x *UserFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeatureRequest.ProtoReflect.Descriptor instead.
func (*UserFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{0}
}

func (x *UserFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *UserFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type UserFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Weight      float32 `protobuf:"fixed32,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Age         string  `protobuf:"bytes,4,opt,name=age,proto3" json:"age,omitempty"`
	Gender      string  `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Direction   string  `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	Topic       string  `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Birthday    string  `protobuf:"bytes,8,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Institution string  `protobuf:"bytes,9,opt,name=institution,proto3" json:"institution,omitempty"`
}

func (x *UserFeature) Reset() {
	*x = UserFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeature) ProtoMessage() {}

func (x *UserFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeature.ProtoReflect.Descriptor instead.
func (*UserFeature) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{1}
}

func (x *UserFeature) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserFeature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserFeature) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UserFeature) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *UserFeature) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserFeature) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *UserFeature) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UserFeature) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserFeature) GetInstitution() string {
	if x != nil {
		return x.Institution
	}
	return ""
}

type ArticleFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *ArticleFeatureRequest) Reset() {
	*x = ArticleFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFeatureRequest) ProtoMessage() {}

func (x *ArticleFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFeatureRequest.ProtoReflect.Descriptor instead.
func (*ArticleFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{2}
}

func (x *ArticleFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *ArticleFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type ArticleFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId     string  `protobuf:"bytes,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	Title         string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CategoryLevel string  `protobuf:"bytes,4,opt,name=category_level,json=categoryLevel,proto3" json:"category_level,omitempty"`
	Tags          string  `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	Author        string  `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	ImpactFactor  string  `protobuf:"bytes,7,opt,name=impact_factor,json=impactFactor,proto3" json:"impact_factor,omitempty"`
	BhvTime       string  `protobuf:"bytes,8,opt,name=bhv_time,json=bhvTime,proto3" json:"bhv_time,omitempty"`
	Weight        float32 `protobuf:"fixed32,9,opt,name=weight,proto3" json:"weight,omitempty"`
	Age           string  `protobuf:"bytes,10,opt,name=age,proto3" json:"age,omitempty"`
	Year          string  `protobuf:"bytes,11,opt,name=year,proto3" json:"year,omitempty"`
	Issue         string  `protobuf:"bytes,12,opt,name=issue,proto3" json:"issue,omitempty"`
	Volume        string  `protobuf:"bytes,13,opt,name=volume,proto3" json:"volume,omitempty"`
	Indexed       string  `protobuf:"bytes,14,opt,name=indexed,proto3" json:"indexed,omitempty"`
	Organization  string  `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *ArticleFeature) Reset() {
	*x = ArticleFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleFeature) ProtoMessage() {}

func (x *ArticleFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleFeature.ProtoReflect.Descriptor instead.
func (*ArticleFeature) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleFeature) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *ArticleFeature) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleFeature) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ArticleFeature) GetCategoryLevel() string {
	if x != nil {
		return x.CategoryLevel
	}
	return ""
}

func (x *ArticleFeature) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ArticleFeature) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArticleFeature) GetImpactFactor() string {
	if x != nil {
		return x.ImpactFactor
	}
	return ""
}

func (x *ArticleFeature) GetBhvTime() string {
	if x != nil {
		return x.BhvTime
	}
	return ""
}

func (x *ArticleFeature) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ArticleFeature) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *ArticleFeature) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *ArticleFeature) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *ArticleFeature) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *ArticleFeature) GetIndexed() string {
	if x != nil {
		return x.Indexed
	}
	return ""
}

func (x *ArticleFeature) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type BehaviorFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *BehaviorFeatureRequest) Reset() {
	*x = BehaviorFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehaviorFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehaviorFeatureRequest) ProtoMessage() {}

func (x *BehaviorFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehaviorFeatureRequest.ProtoReflect.Descriptor instead.
func (*BehaviorFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{4}
}

func (x *BehaviorFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *BehaviorFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type BehaviorFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ArticleId string  `protobuf:"bytes,2,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	BhvTime   string  `protobuf:"bytes,3,opt,name=bhv_time,json=bhvTime,proto3" json:"bhv_time,omitempty"`
	Weight    float32 `protobuf:"fixed32,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *BehaviorFeatureResponse) Reset() {
	*x = BehaviorFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehaviorFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehaviorFeatureResponse) ProtoMessage() {}

func (x *BehaviorFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehaviorFeatureResponse.ProtoReflect.Descriptor instead.
func (*BehaviorFeatureResponse) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{5}
}

func (x *BehaviorFeatureResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BehaviorFeatureResponse) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *BehaviorFeatureResponse) GetBhvTime() string {
	if x != nil {
		return x.BhvTime
	}
	return ""
}

func (x *BehaviorFeatureResponse) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CooperatorFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *CooperatorFeatureRequest) Reset() {
	*x = CooperatorFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CooperatorFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CooperatorFeatureRequest) ProtoMessage() {}

func (x *CooperatorFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CooperatorFeatureRequest.ProtoReflect.Descriptor instead.
func (*CooperatorFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{6}
}

func (x *CooperatorFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *CooperatorFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type CooperatorFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Oid string  `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Num float32 `protobuf:"fixed32,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *CooperatorFeatureResponse) Reset() {
	*x = CooperatorFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CooperatorFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CooperatorFeatureResponse) ProtoMessage() {}

func (x *CooperatorFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CooperatorFeatureResponse.ProtoReflect.Descriptor instead.
func (*CooperatorFeatureResponse) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{7}
}

func (x *CooperatorFeatureResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CooperatorFeatureResponse) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CooperatorFeatureResponse) GetNum() float32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type SubmittedJournalFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *SubmittedJournalFeatureRequest) Reset() {
	*x = SubmittedJournalFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmittedJournalFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmittedJournalFeatureRequest) ProtoMessage() {}

func (x *SubmittedJournalFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmittedJournalFeatureRequest.ProtoReflect.Descriptor instead.
func (*SubmittedJournalFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{8}
}

func (x *SubmittedJournalFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *SubmittedJournalFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type SubmittedJournalFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImpactFactor string `protobuf:"bytes,2,opt,name=impact_factor,json=impactFactor,proto3" json:"impact_factor,omitempty"`
	Num          string `protobuf:"bytes,3,opt,name=num,proto3" json:"num,omitempty"`
	Id           string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Uid          string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *SubmittedJournalFeatureResponse) Reset() {
	*x = SubmittedJournalFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmittedJournalFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmittedJournalFeatureResponse) ProtoMessage() {}

func (x *SubmittedJournalFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmittedJournalFeatureResponse.ProtoReflect.Descriptor instead.
func (*SubmittedJournalFeatureResponse) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{9}
}

func (x *SubmittedJournalFeatureResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmittedJournalFeatureResponse) GetImpactFactor() string {
	if x != nil {
		return x.ImpactFactor
	}
	return ""
}

func (x *SubmittedJournalFeatureResponse) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *SubmittedJournalFeatureResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubmittedJournalFeatureResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type PublishedPaperFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 上次获取特征的时间，如果不传则拉取全量特征数据
	LastFetchTime string `protobuf:"bytes,1,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	// 是否打乱特征数据，如果为true则打乱，否则不打乱
	Shuffle bool `protobuf:"varint,2,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (x *PublishedPaperFeatureRequest) Reset() {
	*x = PublishedPaperFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedPaperFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedPaperFeatureRequest) ProtoMessage() {}

func (x *PublishedPaperFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedPaperFeatureRequest.ProtoReflect.Descriptor instead.
func (*PublishedPaperFeatureRequest) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{10}
}

func (x *PublishedPaperFeatureRequest) GetLastFetchTime() string {
	if x != nil {
		return x.LastFetchTime
	}
	return ""
}

func (x *PublishedPaperFeatureRequest) GetShuffle() bool {
	if x != nil {
		return x.Shuffle
	}
	return false
}

type PublishedPaperFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	SceneId       string `protobuf:"bytes,3,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	PubTime       string `protobuf:"bytes,4,opt,name=pub_time,json=pubTime,proto3" json:"pub_time,omitempty"`
	Title         string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Weight        string `protobuf:"bytes,6,opt,name=weight,proto3" json:"weight,omitempty"`
	CategoryLevel string `protobuf:"bytes,7,opt,name=category_level,json=categoryLevel,proto3" json:"category_level,omitempty"`
	CategoryPath  string `protobuf:"bytes,8,opt,name=category_path,json=categoryPath,proto3" json:"category_path,omitempty"`
	Tags          string `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	Author        string `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	Year          string `protobuf:"bytes,11,opt,name=year,proto3" json:"year,omitempty"`
	Volume        string `protobuf:"bytes,12,opt,name=volume,proto3" json:"volume,omitempty"`
	Issue         string `protobuf:"bytes,13,opt,name=issue,proto3" json:"issue,omitempty"`
	Indexed       string `protobuf:"bytes,14,opt,name=indexed,proto3" json:"indexed,omitempty"`
	ImpactFactor  string `protobuf:"bytes,15,opt,name=impact_factor,json=impactFactor,proto3" json:"impact_factor,omitempty"`
	Content       string `protobuf:"bytes,16,opt,name=content,proto3" json:"content,omitempty"`
	Organization  string `protobuf:"bytes,17,opt,name=organization,proto3" json:"organization,omitempty"`
	ClickCnt      string `protobuf:"bytes,18,opt,name=click_cnt,json=clickCnt,proto3" json:"click_cnt,omitempty"`
	LikeCnt       string `protobuf:"bytes,19,opt,name=like_cnt,json=likeCnt,proto3" json:"like_cnt,omitempty"`
	CollectCnt    string `protobuf:"bytes,20,opt,name=collect_cnt,json=collectCnt,proto3" json:"collect_cnt,omitempty"`
	DownloadCnt   string `protobuf:"bytes,21,opt,name=download_cnt,json=downloadCnt,proto3" json:"download_cnt,omitempty"`
	Uid           string `protobuf:"bytes,22,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *PublishedPaperFeatureResponse) Reset() {
	*x = PublishedPaperFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedPaperFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedPaperFeatureResponse) ProtoMessage() {}

func (x *PublishedPaperFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedPaperFeatureResponse.ProtoReflect.Descriptor instead.
func (*PublishedPaperFeatureResponse) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{11}
}

func (x *PublishedPaperFeatureResponse) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetPubTime() string {
	if x != nil {
		return x.PubTime
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetCategoryLevel() string {
	if x != nil {
		return x.CategoryLevel
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetCategoryPath() string {
	if x != nil {
		return x.CategoryPath
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetIndexed() string {
	if x != nil {
		return x.Indexed
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetImpactFactor() string {
	if x != nil {
		return x.ImpactFactor
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetClickCnt() string {
	if x != nil {
		return x.ClickCnt
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetLikeCnt() string {
	if x != nil {
		return x.LikeCnt
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetCollectCnt() string {
	if x != nil {
		return x.CollectCnt
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetDownloadCnt() string {
	if x != nil {
		return x.DownloadCnt
	}
	return ""
}

func (x *PublishedPaperFeatureResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

var File_feature_proto protoreflect.FileDescriptor

var file_feature_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x68, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x68, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x16, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x22, 0x7d, 0x0a, 0x17, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x68, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x68, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x5c, 0x0a, 0x18, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x22, 0x51, 0x0a,
	0x19, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x22, 0x62, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x22, 0xf9, 0x04, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x32, 0xda, 0x04, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x52, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x6f, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feature_proto_rawDescOnce sync.Once
	file_feature_proto_rawDescData = file_feature_proto_rawDesc
)

func file_feature_proto_rawDescGZIP() []byte {
	file_feature_proto_rawDescOnce.Do(func() {
		file_feature_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_proto_rawDescData)
	})
	return file_feature_proto_rawDescData
}

var file_feature_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_feature_proto_goTypes = []interface{}{
	(*UserFeatureRequest)(nil),              // 0: feature.UserFeatureRequest
	(*UserFeature)(nil),                     // 1: feature.UserFeature
	(*ArticleFeatureRequest)(nil),           // 2: feature.ArticleFeatureRequest
	(*ArticleFeature)(nil),                  // 3: feature.ArticleFeature
	(*BehaviorFeatureRequest)(nil),          // 4: feature.BehaviorFeatureRequest
	(*BehaviorFeatureResponse)(nil),         // 5: feature.BehaviorFeatureResponse
	(*CooperatorFeatureRequest)(nil),        // 6: feature.CooperatorFeatureRequest
	(*CooperatorFeatureResponse)(nil),       // 7: feature.CooperatorFeatureResponse
	(*SubmittedJournalFeatureRequest)(nil),  // 8: feature.SubmittedJournalFeatureRequest
	(*SubmittedJournalFeatureResponse)(nil), // 9: feature.SubmittedJournalFeatureResponse
	(*PublishedPaperFeatureRequest)(nil),    // 10: feature.PublishedPaperFeatureRequest
	(*PublishedPaperFeatureResponse)(nil),   // 11: feature.PublishedPaperFeatureResponse
}
var file_feature_proto_depIdxs = []int32{
	0,  // 0: feature.FeatureServer.ListUserFeatures:input_type -> feature.UserFeatureRequest
	2,  // 1: feature.FeatureServer.ListArticleFeatures:input_type -> feature.ArticleFeatureRequest
	4,  // 2: feature.FeatureServer.ListBehaviorFeatures:input_type -> feature.BehaviorFeatureRequest
	6,  // 3: feature.FeatureServer.ListCooperatorFeatures:input_type -> feature.CooperatorFeatureRequest
	8,  // 4: feature.FeatureServer.ListSubmittedJournalFeatures:input_type -> feature.SubmittedJournalFeatureRequest
	10, // 5: feature.FeatureServer.ListPublishedPaperFeatures:input_type -> feature.PublishedPaperFeatureRequest
	1,  // 6: feature.FeatureServer.ListUserFeatures:output_type -> feature.UserFeature
	3,  // 7: feature.FeatureServer.ListArticleFeatures:output_type -> feature.ArticleFeature
	5,  // 8: feature.FeatureServer.ListBehaviorFeatures:output_type -> feature.BehaviorFeatureResponse
	7,  // 9: feature.FeatureServer.ListCooperatorFeatures:output_type -> feature.CooperatorFeatureResponse
	9,  // 10: feature.FeatureServer.ListSubmittedJournalFeatures:output_type -> feature.SubmittedJournalFeatureResponse
	11, // 11: feature.FeatureServer.ListPublishedPaperFeatures:output_type -> feature.PublishedPaperFeatureResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_feature_proto_init() }
func file_feature_proto_init() {
	if File_feature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehaviorFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehaviorFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CooperatorFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CooperatorFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmittedJournalFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmittedJournalFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedPaperFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedPaperFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feature_proto_goTypes,
		DependencyIndexes: file_feature_proto_depIdxs,
		MessageInfos:      file_feature_proto_msgTypes,
	}.Build()
	File_feature_proto = out.File
	file_feature_proto_rawDesc = nil
	file_feature_proto_goTypes = nil
	file_feature_proto_depIdxs = nil
}
