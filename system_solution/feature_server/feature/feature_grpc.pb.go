// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc3
// source: feature.proto

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeatureServer_ListUserFeatures_FullMethodName             = "/feature.FeatureServer/ListUserFeatures"
	FeatureServer_ListArticleFeatures_FullMethodName          = "/feature.FeatureServer/ListArticleFeatures"
	FeatureServer_ListBehaviorFeatures_FullMethodName         = "/feature.FeatureServer/ListBehaviorFeatures"
	FeatureServer_ListCooperatorFeatures_FullMethodName       = "/feature.FeatureServer/ListCooperatorFeatures"
	FeatureServer_ListSubmittedJournalFeatures_FullMethodName = "/feature.FeatureServer/ListSubmittedJournalFeatures"
	FeatureServer_ListPublishedPaperFeatures_FullMethodName   = "/feature.FeatureServer/ListPublishedPaperFeatures"
)

// FeatureServerClient is the client API for FeatureServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServerClient interface {
	ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListUserFeaturesClient, error)
	ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListArticleFeaturesClient, error)
	ListBehaviorFeatures(ctx context.Context, in *BehaviorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListBehaviorFeaturesClient, error)
	ListCooperatorFeatures(ctx context.Context, in *CooperatorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListCooperatorFeaturesClient, error)
	ListSubmittedJournalFeatures(ctx context.Context, in *SubmittedJournalFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListSubmittedJournalFeaturesClient, error)
	ListPublishedPaperFeatures(ctx context.Context, in *PublishedPaperFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListPublishedPaperFeaturesClient, error)
}

type featureServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServerClient(cc grpc.ClientConnInterface) FeatureServerClient {
	return &featureServerClient{cc}
}

func (c *featureServerClient) ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListUserFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[0], FeatureServer_ListUserFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListUserFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListUserFeaturesClient interface {
	Recv() (*UserFeature, error)
	grpc.ClientStream
}

type featureServerListUserFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListUserFeaturesClient) Recv() (*UserFeature, error) {
	m := new(UserFeature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListArticleFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[1], FeatureServer_ListArticleFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListArticleFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListArticleFeaturesClient interface {
	Recv() (*ArticleFeature, error)
	grpc.ClientStream
}

type featureServerListArticleFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListArticleFeaturesClient) Recv() (*ArticleFeature, error) {
	m := new(ArticleFeature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListBehaviorFeatures(ctx context.Context, in *BehaviorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListBehaviorFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[2], FeatureServer_ListBehaviorFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListBehaviorFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListBehaviorFeaturesClient interface {
	Recv() (*BehaviorFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListBehaviorFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListBehaviorFeaturesClient) Recv() (*BehaviorFeatureResponse, error) {
	m := new(BehaviorFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListCooperatorFeatures(ctx context.Context, in *CooperatorFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListCooperatorFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[3], FeatureServer_ListCooperatorFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListCooperatorFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListCooperatorFeaturesClient interface {
	Recv() (*CooperatorFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListCooperatorFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListCooperatorFeaturesClient) Recv() (*CooperatorFeatureResponse, error) {
	m := new(CooperatorFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListSubmittedJournalFeatures(ctx context.Context, in *SubmittedJournalFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListSubmittedJournalFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[4], FeatureServer_ListSubmittedJournalFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListSubmittedJournalFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListSubmittedJournalFeaturesClient interface {
	Recv() (*SubmittedJournalFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListSubmittedJournalFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListSubmittedJournalFeaturesClient) Recv() (*SubmittedJournalFeatureResponse, error) {
	m := new(SubmittedJournalFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureServerClient) ListPublishedPaperFeatures(ctx context.Context, in *PublishedPaperFeatureRequest, opts ...grpc.CallOption) (FeatureServer_ListPublishedPaperFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeatureServer_ServiceDesc.Streams[5], FeatureServer_ListPublishedPaperFeatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &featureServerListPublishedPaperFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureServer_ListPublishedPaperFeaturesClient interface {
	Recv() (*PublishedPaperFeatureResponse, error)
	grpc.ClientStream
}

type featureServerListPublishedPaperFeaturesClient struct {
	grpc.ClientStream
}

func (x *featureServerListPublishedPaperFeaturesClient) Recv() (*PublishedPaperFeatureResponse, error) {
	m := new(PublishedPaperFeatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeatureServerServer is the server API for FeatureServer service.
// All implementations must embed UnimplementedFeatureServerServer
// for forward compatibility
type FeatureServerServer interface {
	ListUserFeatures(*UserFeatureRequest, FeatureServer_ListUserFeaturesServer) error
	ListArticleFeatures(*ArticleFeatureRequest, FeatureServer_ListArticleFeaturesServer) error
	ListBehaviorFeatures(*BehaviorFeatureRequest, FeatureServer_ListBehaviorFeaturesServer) error
	ListCooperatorFeatures(*CooperatorFeatureRequest, FeatureServer_ListCooperatorFeaturesServer) error
	ListSubmittedJournalFeatures(*SubmittedJournalFeatureRequest, FeatureServer_ListSubmittedJournalFeaturesServer) error
	ListPublishedPaperFeatures(*PublishedPaperFeatureRequest, FeatureServer_ListPublishedPaperFeaturesServer) error
	mustEmbedUnimplementedFeatureServerServer()
}

// UnimplementedFeatureServerServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureServerServer struct {
}

func (UnimplementedFeatureServerServer) ListUserFeatures(*UserFeatureRequest, FeatureServer_ListUserFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListArticleFeatures(*ArticleFeatureRequest, FeatureServer_ListArticleFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArticleFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListBehaviorFeatures(*BehaviorFeatureRequest, FeatureServer_ListBehaviorFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBehaviorFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListCooperatorFeatures(*CooperatorFeatureRequest, FeatureServer_ListCooperatorFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCooperatorFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListSubmittedJournalFeatures(*SubmittedJournalFeatureRequest, FeatureServer_ListSubmittedJournalFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSubmittedJournalFeatures not implemented")
}
func (UnimplementedFeatureServerServer) ListPublishedPaperFeatures(*PublishedPaperFeatureRequest, FeatureServer_ListPublishedPaperFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPublishedPaperFeatures not implemented")
}
func (UnimplementedFeatureServerServer) mustEmbedUnimplementedFeatureServerServer() {}

// UnsafeFeatureServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServerServer will
// result in compilation errors.
type UnsafeFeatureServerServer interface {
	mustEmbedUnimplementedFeatureServerServer()
}

func RegisterFeatureServerServer(s grpc.ServiceRegistrar, srv FeatureServerServer) {
	s.RegisterService(&FeatureServer_ServiceDesc, srv)
}

func _FeatureServer_ListUserFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListUserFeatures(m, &featureServerListUserFeaturesServer{stream})
}

type FeatureServer_ListUserFeaturesServer interface {
	Send(*UserFeature) error
	grpc.ServerStream
}

type featureServerListUserFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListUserFeaturesServer) Send(m *UserFeature) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListArticleFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArticleFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListArticleFeatures(m, &featureServerListArticleFeaturesServer{stream})
}

type FeatureServer_ListArticleFeaturesServer interface {
	Send(*ArticleFeature) error
	grpc.ServerStream
}

type featureServerListArticleFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListArticleFeaturesServer) Send(m *ArticleFeature) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListBehaviorFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BehaviorFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListBehaviorFeatures(m, &featureServerListBehaviorFeaturesServer{stream})
}

type FeatureServer_ListBehaviorFeaturesServer interface {
	Send(*BehaviorFeatureResponse) error
	grpc.ServerStream
}

type featureServerListBehaviorFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListBehaviorFeaturesServer) Send(m *BehaviorFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListCooperatorFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CooperatorFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListCooperatorFeatures(m, &featureServerListCooperatorFeaturesServer{stream})
}

type FeatureServer_ListCooperatorFeaturesServer interface {
	Send(*CooperatorFeatureResponse) error
	grpc.ServerStream
}

type featureServerListCooperatorFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListCooperatorFeaturesServer) Send(m *CooperatorFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListSubmittedJournalFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubmittedJournalFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListSubmittedJournalFeatures(m, &featureServerListSubmittedJournalFeaturesServer{stream})
}

type FeatureServer_ListSubmittedJournalFeaturesServer interface {
	Send(*SubmittedJournalFeatureResponse) error
	grpc.ServerStream
}

type featureServerListSubmittedJournalFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListSubmittedJournalFeaturesServer) Send(m *SubmittedJournalFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureServer_ListPublishedPaperFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishedPaperFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServerServer).ListPublishedPaperFeatures(m, &featureServerListPublishedPaperFeaturesServer{stream})
}

type FeatureServer_ListPublishedPaperFeaturesServer interface {
	Send(*PublishedPaperFeatureResponse) error
	grpc.ServerStream
}

type featureServerListPublishedPaperFeaturesServer struct {
	grpc.ServerStream
}

func (x *featureServerListPublishedPaperFeaturesServer) Send(m *PublishedPaperFeatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FeatureServer_ServiceDesc is the grpc.ServiceDesc for FeatureServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature.FeatureServer",
	HandlerType: (*FeatureServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUserFeatures",
			Handler:       _FeatureServer_ListUserFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListArticleFeatures",
			Handler:       _FeatureServer_ListArticleFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBehaviorFeatures",
			Handler:       _FeatureServer_ListBehaviorFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCooperatorFeatures",
			Handler:       _FeatureServer_ListCooperatorFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSubmittedJournalFeatures",
			Handler:       _FeatureServer_ListSubmittedJournalFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPublishedPaperFeatures",
			Handler:       _FeatureServer_ListPublishedPaperFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feature.proto",
}
