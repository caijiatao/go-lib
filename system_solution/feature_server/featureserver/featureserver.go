// Code generated by goctl. DO NOT EDIT.
// Source: feature.proto

package featureserver

import (
	"context"

	"feature_server/feature"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ArticleFeature        = feature.ArticleFeature
	ArticleFeatureRequest = feature.ArticleFeatureRequest
	UserFeature           = feature.UserFeature
	UserFeatureRequest    = feature.UserFeatureRequest

	FeatureServer interface {
		ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (feature.FeatureServer_ListUserFeaturesClient, error)
		ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (feature.FeatureServer_ListArticleFeaturesClient, error)
	}

	defaultFeatureServer struct {
		cli zrpc.Client
	}
)

func NewFeatureServer(cli zrpc.Client) FeatureServer {
	return &defaultFeatureServer{
		cli: cli,
	}
}

func (m *defaultFeatureServer) ListUserFeatures(ctx context.Context, in *UserFeatureRequest, opts ...grpc.CallOption) (feature.FeatureServer_ListUserFeaturesClient, error) {
	client := feature.NewFeatureServerClient(m.cli.Conn())
	return client.ListUserFeatures(ctx, in, opts...)
}

func (m *defaultFeatureServer) ListArticleFeatures(ctx context.Context, in *ArticleFeatureRequest, opts ...grpc.CallOption) (feature.FeatureServer_ListArticleFeaturesClient, error) {
	client := feature.NewFeatureServerClient(m.cli.Conn())
	return client.ListArticleFeatures(ctx, in, opts...)
}
